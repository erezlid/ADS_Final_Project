---
title: "ADS Final Project"
format:
  html:
    theme: darkly
    toc: true
    number-sections: false
---

```{r include=FALSE}
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(patchwork)
library(qqplotr)
```


# Loading data
```{r}

# Employees data
employees <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Agriculture%20Employees%20/employ.csv")

# Climate change data

rainfall <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/rainfall.csv")

temp <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/temp.csv")

# Pesticides data

pesticides <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/pesticides.csv")


# Land Use data

land_use <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Land%20Use%20/fao_data_land_data.csv")

# Population data
pop <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Population/population_by_country.csv")


# Producer price data
price <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Producer%20Price/crop_prices.csv")

# Agriculture yield data
yield <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Yield/yield.csv")
```


```{r}
# First 6 rows of each table
head(employees)
head(land_use)
head(pesticides)
head(pop)
head(price)
head(rainfall)
head(temp)
head(yield)

```
Some of the tables have unnecessary columns, deleting those columns is a crucial before starting asking questions about the data

# Data Cleaning & Arranging
```{r}

# Country & Year columns uniformity
employees <- employees %>%
  rename(Country = Entity)

land_use <- land_use %>%
  rename(Country = country_or_area,
         Year = year,
         land_price = value)

pesticides <- pesticides %>%
  rename(Country = Area,
         pesticides_amount = Value)

pop <- pop %>%
  rename(Country = country_name,
         Year = year,
         pop_amount = value)

price <- price %>%
  rename(Country = Area,
         crop_price = Value)

rainfall <- rainfall %>%
  rename(Country = Area,
         avg_rainfall = average_rain_fall_mm_per_year)

temp <- temp %>%
  rename(Year=year,
         Country=country)

yield <- yield %>%
  rename(Country = Area,
         yield = Value)
```


```{r}
# Remove unnecessary columns and arrange each table by Country & Year

employees <- employees |>
  arrange(Country, Year)

# Remove plus sign from country name
land_use$Country <- sapply(land_use$Country, function(x) gsub(' \\+', '', x))


land_use <- land_use |>
  filter(category %in% c("agricultural_area")) |>
  select(-c(category,unit,element,element_code, value_footnotes)) |>
  arrange(Country, Year)

pesticides <- pesticides |>
  select(-c(Unit,Element, Domain,Item)) |>
  arrange(Country, Year)

pop <- pop |>
  select(-country_code) |>
  arrange(Country, Year)

# Change Maize(corn) to Maize only
price$Item <- sapply(price$Item, function(x) gsub('corn', '', x)) %>%
  sapply(., function(x) gsub('\\()', '', x))

price <- price |>
  select(-c(Domain.Code,Domain,Area.Code..M49.,Element.Code,Element,
            Item.Code..CPC.,Year.Code,Months.Code,Flag, Flag.Description, Months)) |>
  arrange(Country, Year,Item)

rainfall <- rainfall |>
  arrange(Country, Year)

temp <- temp |>
  arrange(Country, Year)

yield <- yield |>
  select(-c(Domain, Domain.Code,Area.Code,Element.Code,
            Element,Item.Code,Year.Code,Unit)) |>
  arrange(Country, Year,Item)
```

After deleting unnecessary columns, changing column names, filtering the relevant countries and sorting the tables. It's time to tidy the data and join the tables.

```{r}

# get only the countries that use USD
usd_countries <- price %>%
  filter(Unit == 'USD') %>%
  select(Country) %>% distinct()

# Only SLC countries
slc_countries_data <- price %>%
  filter(Unit != 'LCU' & Unit != 'USD') %>% filter(!(Country %in% usd_countries$Country))

# Tidy and change the SLC to USD
price <- price %>%
  filter(Unit != 'LCU') %>% filter(Unit != 'SLC') %>% bind_rows(slc_countries_data) %>%
  arrange(Country, Year) %>%
  mutate(crop_price=
    case_when(
      Unit == 'SLC' ~ crop_price * 0.001537,
      T ~ crop_price
    )
  ) %>%
  select(-Unit) %>%
  pivot_wider(
    names_from=Item, 
    values_from = crop_price
  )

# Rename columns:

price <- price %>% 
  rename(Maize.price= `Maize ` ,
         Potatoes.price = Potatoes,
         Rice.price = Rice,
         Wheat.price = Wheat,
         Soyabeans.price = `Soya beans`,
         Sorghum.price = Sorghum,
         Cassava.price = `Cassava, fresh`,
         SweetPotatoes.price = `Sweet potatoes`,
         Yams.price = Yams,
         Plantains.price = Plantains)
  

# Tidy Yield Data:
yield <- yield %>%
  pivot_wider(names_from = Item, values_from = yield, values_fill = 0)

# Rename columns:
yield <- yield %>%
  rename(
    Maize.amount = Maize,
    Potatoes.amount = Potatoes,
    Rice.amount = `Rice, paddy`,
    Wheat.amount = Wheat,
    Soyabeans.amount = Soybeans,
    Sorghum.amount = Sorghum,
    Cassava.amount = Cassava,
    SweetPotatoes.amount = `Sweet potatoes`,
    Yams.amount = Yams,
    Plantains.amount = `Plantains and others`
  )

# Join tables
full_data <- yield %>%
  inner_join(price,by=c("Year","Country")) |>
  left_join(pesticides,by=c("Year","Country")) |>
  left_join(pop,by=c("Year","Country")) |>
  left_join(rainfall,by=c("Year","Country")) |>
  left_join(temp,by=c("Year","Country")) |>
  left_join(employees,by=c("Year","Country")) |>
  left_join(land_use, by=c("Year","Country")) |>
  arrange(Country, Year)

# Reordering columns
full_data <- full_data |>  select(Year, Country, pop_amount,number_employed_agri,avg_temp, avg_rainfall,land_price, pesticides_amount, ends_with('.price'), ends_with('.amount')) %>% mutate(avg_rainfall = as.integer(avg_rainfall))
```

```{r}

full_data <- full_data %>%
  select(-c(Plantains.amount,
            SweetPotatoes.amount,
            Yams.amount,
            Cassava.amount,
            Sorghum.amount,
            Plantains.price,
            SweetPotatoes.price,
            Yams.price,
            Cassava.price,
            Sorghum.price))

setDT(full_data)

# Get the crop amount columns
amounts <- full_data %>%
  select(ends_with('.amount')) %>%
  colnames()

# get the crop price columns
prices_cols <- full_data %>%
  select(ends_with('.price')) %>%
  colnames()

# Place zeros when the amount of a certain crop is 0 using data.table.
for (i in 1:length(amounts)) {
  full_data[full_data[[amounts[i]]] == 0, (prices_cols[i]) := 0]
}
```

Our goal is to use mean based analysis in order to find which of the indices affect the most on crop yield outcome. Therefore, we used mean imputation to fill the missing values in each column.
```{r}

full_data <- full_data %>%
  group_by(Country) %>%
  mutate_at(vars(-group_cols()),~ ifelse(is.na(.), mean(., na.rm=T),.))  %>%
  mutate(n = n()) %>%
  filter(n > 4 ) %>%
  select(-n) %>%
  ungroup() %>% setDT()

# Change every na value into -1 -> -1 indicates that there's no data about the price.
full_data[, (prices_cols) := lapply(.SD, function(x) ifelse(is.na(x),-1,x)), .SDcols = prices_cols]

# Adding a crop price column.
full_data$avg_crop_price <- full_data %>%
  select(all_of(prices_cols)) %>%
  rowMeans(na.rm=T)

# Add a total_yield column

full_data$total_yield <- full_data %>%
  select(all_of(amounts)) %>%
  rowSums(na.rm=T)

```


# Data Visualization

## Scatter plots
```{r warning=FALSE}
full_data |>
  filter(!is.na(pop_amount)) |>
  group_by(Country) |>
  summarize(avg_pop = mean(pop_amount), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_pop + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title='Avg crop yield VS Avg Population  (Log Scaled)',
       x='log(avg population)',
       y='log(avg crop yield)')

full_data |>
  filter(!is.na(number_employed_agri)) |>
  group_by(Country) |>
  summarize(avg_employees = mean(number_employed_agri), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_employees + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title='Avg crop yield VS Avg Num of Employees (Log Scaled)',
       x='log(avg employees)',
       y='log(avg crop yield)')

full_data |>
  filter(!is.na(avg_temp)) |>
  group_by(Country) |>
  summarize(avg_temp =  mean(avg_temp), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=avg_temp, y=avg_yield, color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title='Avg crop yield VS Avg Temperature')

full_data |>
  filter(!is.na(avg_rainfall)) |>
  group_by(Country) |>
  summarize(avg_rainfall = mean(avg_rainfall), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=avg_rainfall, y=avg_yield, color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title = 'Avg crop yield VS Avg rainfall')

full_data |>
  filter(!is.na(land_price)) |>
  group_by(Country) |>
  summarize(avg_land_price = mean(land_price), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_land_price + 1), y=log(avg_yield + 1), color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title = 'Avg crop yield VS Avg Land price (Log Scaled)',
       x='log(avg land price)',
       y='log(avg crop yield)')

full_data |>
  filter(!is.na(pesticides_amount)) |>
  group_by(Country) |>
  summarize(avg_pesticides = mean(pesticides_amount), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_pesticides+1), y=log(avg_yield+1), color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(title = 'Avg crop yield VS Avg Pesticides amount (Log Scaled)',
       x='log(avg pesticides)',
       y='log(avg crop yield)')

full_data |>
  filter(!is.na(avg_crop_price)) |>
  group_by(Country) |>
  summarize(avg_crop_price = mean(avg_crop_price), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_crop_price + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  geom_smooth(formula = y~x,method='loess',se=F,color='red',span=1)+
  labs(
    title = 'Avg crop yield VS Avg crop price (Log Scaled)',
    x= 'log(avg crop price)',
    y= 'log(avg crop yield)'
  )

```
The relationships don't look very linear, therefore we might need to use non-linear regression in order to capture the relation.

# Distribution plot

Determine the distribution of our response variable "yield"
```{r}
yield_hist <- full_data |>
  na.omit() |>
  ggplot(aes(x=total_yield)) + 
  geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)+
  theme(axis.text.x = element_text(angle=20, hjust=0.5))

yield_hist_log <- full_data |>
  na.omit() |>
  ggplot(aes(x=log(total_yield + 1))) + 
  geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)+
  labs(x = 'log(yield)') + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank())

yield_hist_sqrt <- full_data |>
  na.omit() |>
  ggplot(aes(x=sqrt(total_yield))) +
  geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank())

yield_hist_log10 <- full_data |>
  na.omit() |>
  ggplot(aes(x=log(total_yield + 1,base=10))) + 
  geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank()) + 
  labs(x='log_10(total_yield)')

yield_hist + yield_hist_log + yield_hist_sqrt +  yield_hist_log10 + plot_annotation(
  title = 'Response Variable Distribution (Yield)',
  theme = theme(plot.title = element_text(hjust=0.5)))
```
The distribution of the total yield variable seems multi-modal. Thus, it probably won't be normal. However, we'll still conduct a normality test to make sure it really doesn't. 

```{r warning=FALSE}
library(nortest)
ad.test(full_data$total_yield)
ad.test(log(full_data$total_yield + 1))
ad.test(sqrt(full_data$total_yield))
ad.test(log(full_data$total_yield + 1, base=10))

qqplot(qnorm(ppoints(length(full_data$total_yield))),full_data$total_yield, xlab = 'Theoretical Quantials',ylab = 'Observed Yield Quantiles')
qqline(full_data$total_yield,distribution=qnorm)
```

As we expected the distribution really isn't a normal one. However, we still want the benefits of a normal distribution so we'll check whether each of the clusters distribute normal or at least approaches to normal distribution. For that, we'll use a package called mixtools which estimates the parameters of each of the clusters distributions using EM algorithm.

```{r}
library(mixtools)

x <- normalmixEM(full_data$total_yield,k=2)
mu  <- x$mu
sigma <- x$sigma

full_data %>%
  ggplot(aes(x=total_yield))+
  geom_histogram(aes(y=..density..),fill="#69b3a2", color="#e9ecef", bins=30) +
  stat_function(fun = function(x) dnorm(x,mean=mu[2],sd=sigma[2]),color='blue') + 
  stat_function(fun = function(x) dnorm(x,mean=mu[1],sd=sigma[1]),color='red') +
  labs(x='Yield', title = 'Normality Approachness check') + expand_limits(x=c(-1e+05,8e+05))
```
We can't determine that the distribution of each cluster is normal. However, we can see that each cluster approaches normality therefore, we are able to use simple linear regression model.

## Regression Analysis

### Linear Regression


```{r}
full_data %>%
  select(-ends_with('.amount'),-ends_with('.price'),-Country) %>%
  lm(total_yield~., data=.) %>% summary()


```


### Non-Linear Regression

When plotting scatter plots, we saw that some relations in our data with the total crop yield might be non-linear therefore we wanted to try using local regression (loess) that uses local polynomial regression in order to a fit a line.
```{r}
```


## Correlation Analysis
```{r}
corel <- full_data |>
  select(-total_yield, -ends_with('.amount'), -ends_with('.price'),-Country) |>
  select_if(is.numeric) |>
  lapply(function(col) cor.test(col,full_data$total_yield,method = 'kendal', exact=F))
```

| Variable                 | P-value  | tau        | 
| ------------------------ |----------|------------|
| Population               | 2.2e-16  |0.3042002   |
| Employees in agriculture | 2.2e-16  |0.1741384   |
| Avg Temp                 | 2.2e-16  |0.1214152   |
| Avg Rainfall             | 2.2e-16  |0.1202609   |
| Land price               | 2.2e-16  |0.2363915   |
| Pesticides               | 2.2e-16  |0.4157361   |
| Crop Price               | 2.2e-16  |0.2443471   |
| Year                     | 2.2e-16  |0.08312406  |

: Spearman's Rank Correlation Test Results


Each p-value in the table is lower than 0.05 thus, we can say that every numeric variable in the data is correlated with the yield variable. However, the rho values are relatively small which means that the monotonic relation between the variables in the data and the yield variable isn't strong.

## Chisq Test

Since the country column is a categorical variable we can't conduct a correlation test. Thus, we'll use the chi squared test for independence in order to check if the yield variable is dependent of the country variable.

```{r}
full_data |>
  group_by(Country) |>
  select(Country, total_yield) |>
  with(chisq.test(table(Country, total_yield) , simulate.p.value = T))
```









