---
title: "ADS Final Project - What effects agriculture"
author: "Amir Boger & Lidor Erez"
format: 
  revealjs:
    smaller: true
    scrollable: true
    theme: dark
editor: visual
---

## Introduction

-   Agriculture, in today's world, is considered a central part of our lives. because of it, our lives and other people's lives have forever changed. therefore, it's important to understand what can truly affect it.

-   In this project we will Present our findings as well as our data we gathered regarding what can influence our agriculture output, and will try to understand what can affect our agricultural industry

## Our Research Hypothesis

We believe that there is a connection between several factors and agriculture. Some aspects might have a positive effect on the agriculture industry, While others may have a negative one

so, for this project, we will be focusing on the correlation's and Regression's between agriculture's output compared to: Population, climate change, Land use, employment and product price

![](images/research-01.JPG){width="377"}

## Literature Review

the purpus of the Literature Review was to understand what should we be expecting to see when we analysis our data. while some of the articls we found have confirmed what we where expecting to see, others had shown a to be different then what we expecting to see

![](images/books.JPG){width="448"}

## Literature Review

[Climate change]{.underline} - Regarding the climate change index, Unlike some of our indexes, the effects of climate change on agriculture are more complex, since it can impact it in more than one way (kane, et.al, 1992). so, for this project, we decided to fouces on data of pesticides and temperature

[Population]{.underline} - Regarding the size of population and it's connection to agriculture, we have learned that population growth doesn't necessarily mean higher crop amount. in fact, according to a research done in Ethiopia, it was discovered that more rapid population growth led to low per capita income (Mekuria, 2018)

## Literature Review

[employment and labor]{.underline} - as for the labor index, we wanted to see how much does changes in the employment in agriculture affects the agriculture's output. for example, one research done in china showed that in some places where there is more agricultural labor, grain yields are higher as well (Dazhuan et.al, 2018)

[Land use]{.underline} - although Land use might have affect on the agricultur's Yield output, our literature has shown no straight connection between the Land use's change and the agricultures output. the findings\
confirm that recovery of cropland to forest or grassland at western China did not result in significant loss of agricultural production (Yan et.al, 2009)

[economy]{.underline} - regarding the economy index, we decided to focuse on the crop's price, as it can have both positive and negative affects on the agriculture output. higher products prices encurage producers to increase their production, because high prices mean higher income. on the other hand, lower products prices would decrease production, which would cause the income of the producers to be smaller (cruz-lazaro, et.al, 2023)

## Data gathering

For this project, we gathered our data from a couple of resourses, including:

-   Kaggle

-   Our world in data

-   FAO (Food and agriculture organization of the united nations)

## Data pre processing - first inspection

For our project, we first took our raw data and inspected it.

```{r echo=TRUE}
# Employees data
employees <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Agriculture%20Employees%20/employ.csv")

# Climate change data

rainfall <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/rainfall.csv")

temp <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/temp.csv")

# Pesticides data

pesticides <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Climate%20Change/pesticides.csv")


# Land Use data

land_use <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Land%20Use%20/fao_data_land_data.csv")

# Population data
pop <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Population/population_by_country.csv")


# Producer price data
price <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Producer%20Price/crop_prices.csv")

# Agriculture yield data
yield <- read.csv("https://raw.githubusercontent.com/erezlid/ADS_Final_Project/main/Data/Yield/yield.csv")

head(yield)
```

## Libraries

Aside from the usual libraries we used in calss, we decided to use some other libraries, such as "mixtools" and "nortests". Here are the libraries we used for this project:

```{r echo=TRUE, warning=FALSE}
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
library(patchwork)
library(qqplotr)
library(mixtools)
library(nortest)
library(LaplacesDemon)
```

## Data pre processing - Cleaning and organizing data

since the raw data we gained was unorganized, the first thing we did was to rename the columns so that we can work with it more efficient

```{r echo=TRUE}
# Country & Year columns uniformity
employees <- employees %>%
  rename(Country = Entity)

land_use <- land_use %>%
  rename(Country = country_or_area,
         Year = year,
         land_price = value)

pesticides <- pesticides %>%
  rename(Country = Area,
         pesticides_amount = Value)

pop <- pop %>%
  rename(Country = country_name,
         Year = year,
         pop_amount = value)

price <- price %>%
  rename(Country = Area,
         crop_price = Value)

rainfall <- rainfall %>%
  rename(Country = Area,
         avg_rainfall = average_rain_fall_mm_per_year)

temp <- temp %>%
  rename(Year=year,
         Country=country)

yield <- yield %>%
  rename(Country = Area,
         yield = Value)
```

## Data pre processing - Cleaning and organizing data

after we renamed our columns, we removed some of them since they contained some unnecessary data for this project:

```{r echo=TRUE}
# Remove unnecessary columns and arrange each table by Country & Year
pesticides <- pesticides |>
  select(-c(Unit,Element, Domain,Item)) |>
  arrange(Country, Year)

yield <- yield |>
  select(-c(Domain, Domain.Code,Area.Code,Element.Code,
            Element,Item.Code,Year.Code,Unit)) |>
  arrange(Country, Year,Item)

pop <- pop |>
  select(-country_code) |>
  arrange(Country, Year)

rainfall <- rainfall |>
  arrange(Country, Year)

temp <- temp |>
  arrange(Country, Year)

employees <- employees |>
  arrange(Country, Year)
```

## Data pre processing - Cleaning and organizing data

Another thing we had to do was to remove some unnecessary notes inside the cells themselves.

for example: in the "price" table, we removed unnecessary notes which where inside the "items" columns:

```{r echo=TRUE}
# Change Maize(corn) to Maize only
price$Item <- sapply(price$Item, function(x) gsub('corn', '', x)) %>%
  sapply(., function(x) gsub('\\()', '', x))

price <- price |>
  select(-c(Domain.Code,Domain,Area.Code..M49.,Element.Code,Element,
            Item.Code..CPC.,Year.Code,Months.Code,Flag, Flag.Description, Months)) |>
  arrange(Country, Year,Item)
```

```{r echo=TRUE}
# Remove plus sign from country name
land_use$Country <- sapply(land_use$Country, function(x) gsub(' \\+', '', x))


land_use <- land_use |>
  filter(category %in% c("agricultural_area")) |>
  select(-c(category,unit,element,element_code, value_footnotes)) |>
  arrange(Country, Year)
```

## Tiding the data

After the tables where organized and ready, we standardized the prices to ensure consistency by converting all of the price data to USD. Then we tidy the price data to make it more readable:

```{r echo=TRUE}
# get only the countries that use USD
usd_countries <- price %>%
  filter(Unit == 'USD') %>%
  select(Country) %>% distinct()

# Only SLC countries
slc_countries_data <- price %>%
  filter(Unit != 'LCU' & Unit != 'USD') %>% filter(!(Country %in% usd_countries$Country))

price <- price %>%
  filter(Unit != 'LCU') %>% filter(Unit != 'SLC') %>% bind_rows(slc_countries_data) %>%
  arrange(Country, Year) %>%
  mutate(crop_price=
    case_when(
      Unit == 'SLC' ~ crop_price * 0.001537,
      T ~ crop_price
    )
  ) %>%
  select(-Unit) %>%
  pivot_wider(
    names_from=Item, 
    values_from = crop_price
  )
```

## Tiding the data

Although we have renamed some of the columns in the pre processing procedure, we decided to once again rename the columns so it'd be more easier to work with them:

```{r echo=TRUE}

# Rename columns:

price <- price %>% 
  rename(Maize.price= `Maize ` ,
         Potatoes.price = Potatoes,
         Rice.price = Rice,
         Wheat.price = Wheat,
         Soyabeans.price = `Soya beans`,
         Sorghum.price = Sorghum,
         Cassava.price = `Cassava, fresh`,
         SweetPotatoes.price = `Sweet potatoes`,
         Yams.price = Yams,
         Plantains.price = Plantains)
  
```

we did the same procedure to the yield table:

```{r echo=TRUE}
# Tidy Yield Data:
yield <- yield %>%
  pivot_wider(names_from = Item, values_from = yield, values_fill = 0)

# Rename columns:
yield <- yield %>%
  rename(
    Maize.amount = Maize,
    Potatoes.amount = Potatoes,
    Rice.amount = `Rice, paddy`,
    Wheat.amount = Wheat,
    Soyabeans.amount = Soybeans,
    Sorghum.amount = Sorghum,
    Cassava.amount = Cassava,
    SweetPotatoes.amount = `Sweet potatoes`,
    Yams.amount = Yams,
    Plantains.amount = `Plantains and others`
  )

```

## Joins

In order to analyse the entire data in the most efficent way, we joined all of our tables into one big table:

```{r echo=TRUE}
# Join tables
full_data <- yield %>%
  inner_join(price,by=c("Year","Country")) |>
  left_join(pesticides,by=c("Year","Country")) |>
  left_join(pop,by=c("Year","Country")) |>
  left_join(rainfall,by=c("Year","Country")) |>
  left_join(temp,by=c("Year","Country")) |>
  left_join(employees,by=c("Year","Country")) |>
  left_join(land_use, by=c("Year","Country")) |>
  arrange(Country, Year)

# Reordering columns
full_data <- full_data |>  select(Year, Country, pop_amount,number_employed_agri,avg_temp, avg_rainfall,land_price, pesticides_amount, ends_with('.price'), ends_with('.amount')) %>% mutate(avg_rainfall = as.integer(avg_rainfall))

head(full_data)
```

After joining the tables, we decided to work with the main crops in our data so we removed the rest from the table.

```{r echo=TRUE}

# Choose only 5 crops to focus on
full_data <- full_data %>%
  select(
    -c(
      Sorghum.price,
      Cassava.price,
      SweetPotatoes.price,
      Yams.price,
      Plantains.price,
      Sorghum.amount,
      Cassava.amount,
      SweetPotatoes.amount,
      Yams.amount,
      Plantains.amount
    )
  )
```

## Filling missing values

To make our data more reasonable and also to deal with missing values, we decided to place 0 at the respective price column when a certain crop's amount is 0. For example: if Maize.amount == 0 then Maize.price should be zero as well. by doing that we ensure that when there's no yield for a certain crop, the price will be zero.

```{r echo=TRUE}
setDT(full_data)

# Get the crop amount columns
amounts <- full_data %>%
  select(ends_with('.amount')) %>%
  colnames()

# get the crop price columns
prices_cols <- full_data %>%
  select(ends_with('.price')) %>%
  colnames()
```

```{r echo=TRUE}
# Place zeros when the amount of a certain crop is 0 using data.table.
for (i in 1:length(amounts)) {
  full_data[full_data[[amounts[i]]] == 0, (prices_cols[i]) := 0]
}
```

## Removing unnecessary rows

we also removed countries that has less than 5 observations.

```{r echo=TRUE}
full_data <- full_data %>%
  group_by(Country) %>%
  mutate_at(vars(-group_cols()),~ ifelse(is.na(.), mean(., na.rm=T),.))  %>%
  mutate(n = n()) %>%
  filter(n > 4 ) %>%
  select(-n) %>%
  ungroup() %>% setDT()
```

At the end, we used mean imputation since our goal is to use mean based analysis in order to find which of the indices affect the most on crop yield outcome.

```{r echo=TRUE }
# Change every na value into -1 -> -1 indicates that there's no data about the price.
full_data[, (prices_cols) := lapply(.SD, function(x) ifelse(is.na(x),-1,x)), .SDcols = prices_cols]

# Adding a crop price column.
full_data$avg_crop_price <- full_data %>%
  select(all_of(prices_cols)) %>%
  rowMeans(na.rm=T)

# Add a total_yield column

full_data$total_yield <- full_data %>%
  select(all_of(amounts)) %>%
  rowSums(na.rm=T)
```

## Scatter plots

We used scatter plots in order to understand the relation between our variables and our response variable (total_yield). In order to make the plots readable, we grouped the data by country and calculated each feature average and then plotted it.

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(pop_amount)) |>
  group_by(Country) |>
  summarize(avg_pop = mean(pop_amount), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_pop + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title='Avg crop yield VS Avg Population  (Log Scaled)',
       x='log(avg population)',
       y='log(avg crop yield)')
```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(number_employed_agri)) |>
  group_by(Country) |>
  summarize(avg_employees = mean(number_employed_agri), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_employees + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title='Avg crop yield VS Avg Num of Employees (Log Scaled)',
       x='log(avg employees)',
       y='log(avg crop yield)')
```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(avg_temp)) |>
  group_by(Country) |>
  summarize(avg_temp =  mean(avg_temp), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=avg_temp, y=avg_yield, color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title='Avg crop yield VS Avg Temperature')
```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(avg_rainfall)) |>
  group_by(Country) |>
  summarize(avg_rainfall = mean(avg_rainfall), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=avg_rainfall, y=avg_yield, color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title = 'Avg crop yield VS Avg rainfall')

```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(land_price)) |>
  group_by(Country) |>
  summarize(avg_land_price = mean(land_price), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_land_price + 1), y=log(avg_yield + 1), color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title = 'Avg crop yield VS Avg Land price (Log Scaled)',
       x='log(avg land price)',
       y='log(avg crop yield)')
```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(pesticides_amount)) |>
  group_by(Country) |>
  summarize(avg_pesticides = mean(pesticides_amount), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_pesticides+1), y=log(avg_yield+1), color=avg_yield)) + 
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(title = 'Avg crop yield VS Avg Pesticides amount (Log Scaled)',
       x='log(avg pesticides)',
       y='log(avg crop yield)')
```

```{r echo=TRUE, warning=FALSE}
full_data |>
  filter(!is.na(avg_crop_price)) |>
  group_by(Country) |>
  summarize(avg_crop_price = mean(avg_crop_price), avg_yield = mean(total_yield)) |>
  ggplot(aes(x=log(avg_crop_price + 1), y=log(avg_yield + 1), color=avg_yield)) +
  geom_point() + 
  geom_smooth(formula = y~x, method='glm',se=F) + 
  labs(
    title = 'Avg crop yield VS Avg crop price (Log Scaled)',
    x= 'log(avg crop price)',
    y= 'log(avg crop yield)'
  )
```

## Distribution analysis

Prior to our analysis, we also wanted to understand what is the distribution of our response variable. Thus, we created a density plot to present it's distribution. Furthermore, we also tried to use various transformation to transform the distribution into a normal one.

```{r}

yield_hist <- full_data |>
  na.omit() |>
  ggplot(aes(x=total_yield)) + 
  geom_histogram(fill="#69b3a2", color="black", alpha=0.8,bins=30)+
  theme(axis.text.x = element_text(angle=20, hjust=0.5))
```

```{r}
yield_hist_log <- full_data |>
  na.omit() |>
  ggplot(aes(x=log(total_yield + 1))) + 
  geom_histogram(fill="#69b3a2", color="black", alpha=0.8,bins=30)+
  labs(x = 'log(yield)') + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank())
```

```{r}
yield_hist_sqrt <- full_data |>
  na.omit() |>
  ggplot(aes(x=sqrt(total_yield))) +
  geom_histogram(fill="#69b3a2", color="black", alpha=0.8 ,bins=30) + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank())
```

```{r}
yield_hist_log10 <- full_data |>
  na.omit() |>
  ggplot(aes(x=log(total_yield + 1,base=10))) + 
  geom_histogram(fill="#69b3a2", color="black", alpha=0.8 ,bins=30) + 
  theme(axis.text.x = element_text(angle=20, hjust=0.5),
        axis.title.y = element_blank()) + 
  labs(x='log_10(total_yield)')
```

## Distribution plot

From the plot, we understood our data could be bi-modal(two modes). Thus, it'll be hard to change it into a normal distribution using monotonic transformation.

```{r, echo=TRUE}
full_plot <- yield_hist + yield_hist_log + yield_hist_sqrt +  yield_hist_log10 + plot_annotation(
  title = 'Response Variable Distribution (Yield)',
  theme = theme(plot.title = element_text(hjust=0.5)))


full_plot
```

## Bi-modal Test

We used the Laplace demon R package in order to check whether the distribution of our response variable is bi-modal or not. In addition to that, we also calculated the modes of the distribution (bi-modal = two modes).

```{r, echo=TRUE}
is.bimodal(full_data$total_yield)
Modes(full_data$total_yield)
```

## Normality check - AD test

As with most projects and researches, we also checked whether the data has a normality distribution or not. We used the ad test, the QQplot, and the mixed model

```{r, echo=TRUE}
ad.test(full_data$total_yield)
ad.test(log(full_data$total_yield + 1))
ad.test(sqrt(full_data$total_yield))
ad.test(log(full_data$total_yield + 1, base=10))
```

## Normality check - QQPlot 

```{r}
qqplot(qnorm(ppoints(length(full_data$total_yield))),full_data$total_yield, xlab = 'Theoretical Quantials',ylab = 'Observed Yield Quantiles')
qqline(full_data$total_yield,distribution=qnorm)
```

When doing an analysis to a bi-modal distributed response variable one needs to try to separate the data into clusters and conduct his analysis on each of the clusters. However, one can also use a mixed model in order to understand the distribution of each cluster.

## Normality check -Mixed Model

```{r, echo=TRUE}
ggm.model <- normalmixEM(full_data$total_yield,k=2)
mu  <- ggm.model$mu
sigma <- ggm.model$sigma
```

We fit a GMM (Gaussian Mixed Model) into our response variable (total_yield) in order to determine whether each cluster distribution follows a Gaussian or at least approaches to a Gaussian.

```{r , echo=TRUE}

full_data %>%
  ggplot(aes(x=total_yield))+
  geom_histogram(aes(y=..density..),fill="#69b3a2", color="black", bins=30) +
  stat_function(fun = function(x) dnorm(x,mean=mu[2],sd=sigma[2]),color='blue') + 
  stat_function(fun = function(x) dnorm(x,mean=mu[1],sd=sigma[1]),color='red') +
  labs(x='Yield', title = 'Gaussian Mixed Model Fit')
```

Though we can't really determine if the data distribute normally or not, we can say that each cluster is approaching to a normal distribution. Thus, we can use simple linear regression.

## Data analysis

-   Regression analysis using simple linear regression
-   Correlation analysis using Kendall
-   Chi-squared test for independence between country and total_yield

## Regression Analysis

for this project, we desided to use 3 different types of regretion models. while they all used linear regertion, each one had it's own method of calculation.

### Model 1

```{r,echo=TRUE}
lm.data <- full_data %>%
  select(-ends_with('.amount'),-ends_with('.price'),-Country) 

model.1 <- lm.data %>%
  lm(total_yield~., data=.)

model.1 %>% summary()
```

### Model 2

```{r, echo=TRUE}
model.2 <- lm.data %>%
  lm(total_yield~pop_amount*number_employed_agri+avg_temp*avg_rainfall+land_price+pesticides_amount+avg_crop_price, data=.)

model.2 %>% summary()
```

### Model 3

```{r,echo=TRUE}
model.3 <- lm.data %>%
  lm(total_yield~pop_amount*number_employed_agri+avg_temp*avg_rainfall+land_price+pesticides_amount+avg_crop_price + pop_amount*land_price, data=.)

model.3 %>% summary()
```

## Correlation Analysis

```{r, echo=TRUE}
corel <- full_data |>
  select(-total_yield, -ends_with('.amount'), -ends_with('.price'),-Country) |>
  select_if(is.numeric) |>
  lapply(function(col) cor.test(col,full_data$total_yield,method = 'kendal'))
```

| Variable                 | P-value   | tau        |
|--------------------------|-----------|------------|
| Population               | 2.2e-16   | 0.1485648  |
| Employees in agriculture | 7.723e-09 | -0.0555603 |
| Avg Temp                 | 2.2e-16   | -0.2638102 |
| Avg Rainfall             | 2.2e-16   | -0.1430611 |
| Land price               | 2.2e-16   | 0.1466927  |
| Pesticides               | 2.2e-16   | 0.3617226  |
| Crop Price               | 2.2e-16   | 0.09188591 |
| Year                     | 2.2e-16   | 0.1529316  |

: Kendal Correlation Test Results

## Chisquared - Test

```{r, echo=TRUE, warning=FALSE}
full_data |>
  group_by(Country) |>
  select(Country, total_yield) |>
  with(chisq.test(table(Country, total_yield)))
```

## Conclusions

After comparing our results to our literature, we found out that although some of our indexes have indeed proved what the literature told us,others have shown a different type of results.

For example: the "labor" index was predicted to have a postivie affect on the yield's output. However,our modle has shown a negative connection, both in the correlation and in the regertion modles.

On the other hand, the "crop price" index has shown a positive connection to the yield, just as itwas expected to be seen from the literature.

Having said that, we can't fully conclude that our molde can predict those connections, since it was mostly general one. In order to understand the connections better, further reaserch, aimed to be more focused on the connections individually, needs to be done, for there may be a connection which we could not tell
